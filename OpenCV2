import cv2
import numpy as np

# Abrir Camara con OpenCv2
cap = cv2.VideoCapture(1)
# Initiate holistic model

while cap.isOpened():
    ret, frame = cap.read()
    
    # Recolor Feed
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    image.flags.writeable = False        
    image.flags.writeable = True   
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

                    
    cv2.imshow('Raw Webcam Feed', image)

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()


# YOLO v3
import cv2

# Cargar el modelo YOLO pre-entrenado y la configuraci칩n
net = cv2.dnn.readNet('yolov3.weights', 'yolov3.cfg')

# Cargar las clases
with open('coco.names', 'r') as f:
    classes = f.read().strip().split('\n')

# Iniciar la captura de la c치mara frontal (0 es generalmente la c치mara frontal predeterminada)
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    
    if not ret:
        continue

    # Realiza la detecci칩n de objetos en el frame capturado
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(net.getUnconnectedOutLayersNames())

    # Procesar las salidas y dibujar los objetos detectados
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = int(np.argmax(scores))
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])
                x = center_x - w // 2
                y = center_y - h // 2
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                label = str(classes[class_id])
                cv2.putText(frame, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Mostrar el frame con los objetos detectados
    cv2.imshow('Objetos Detectados', frame)

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
